<html>
<head>
	<meta http-equiv="refresh" content="30" />
	<meta http-equiv="cache-control" content="no-cache" />
	<meta http-equiv="pragma" content="no-cache" />
</head>
<body>
<?php

error_reporting(E_ALL);
ini_set('display_errors', '1');

include_once('../includes/settings.inc.php');
include_once('../includes/functions.inc.php');

if (IN_SESSION == 'N')
{
	die('The General Assembly is not in session.');
}

@connect_to_db();

/*
	QUESTIONS
	* Don't we already have a method of tracking when we last updated full text, summaries, etc.
	  in the bills table and, if so, can't we employ that here to do something more intelligent
	  than update a random subset?
	* What is the maximum query rate before LIS shuts us down?
	* Doesn't this need a shim to allow for the initial update?
*/

# Generate a list of all RS legislator IDs and LIS legislator IDs (i.e. H142)
$sql = 'SELECT id, lis_id, chamber
		FROM representatives
		WHERE lis_id IS NOT NULL
		AND (date_ended IS NULL OR date_ended > now())
		ORDER BY lis_id ASC';
$result = mysql_query($sql);
while ($legislator = mysql_fetch_array($result))
{
	$tmp = strtoupper($legislator['chamber']{0});
	$tmp .= $legislator['lis_id'];
	$legislators[$tmp] = $legislator['id'];
}
# This is really pathetic, but the below is a shim to deal with Sen. Robert Hurt, who was a delegate
# until his ascendency to the upper chamber in 2007. Obviously this is a lousy long-term solution,
# but for lack of any better systemic solution to this problem, I'm gonna go with this.
$legislators['H146'] = 44;

# Generate a list of all still-alive bills from the current session, including ID, number,
# and chief patron ID; if the bill has co-patrons, retrieve that listing, too.
$sql = 'SELECT bills.id, bills.number, bills.chief_patron_id, sessions.lis_id AS session_lis_id,
			(SELECT GROUP_CONCAT(legislator_id)
			FROM bills_copatrons
			WHERE bill_id=bills.id
			GROUP BY bill_id) AS copatrons
		FROM bills LEFT JOIN sessions ON bills.session_id=sessions.id
		WHERE bills.outcome IS NULL AND sessions.id='.SESSION_ID.'
		ORDER BY bills.copatrons DESC, bills.date_introduced DESC
		LIMIT 50';
$result = mysql_query($sql);

# It's possible that there are no bills in need of updating, in which case we can safely quit.
if (mysql_num_rows($result) == 0)
{
	exit();
}

# Iterate through every bill generated by this query to check out its copatrons.
while ($bill = mysql_fetch_array($result))
{
	# If this bill has known copatrons already, take the comma separated list of them and explode it
	# into an array.
	if (!empty($bill['copatrons']))
	{
		$bill['copatrons'] = explode(',', $bill['copatrons']);
	}
	
	# Get the HTML of the page for this bill's copatrons.
	$html = get_content('leg1.state.va.us/cgi-bin/legp504.exe?'.$bill['session_lis_id']
		.'+mbr+'.strtoupper($bill['number']));
	
	# Turn the HTML into an array.
	$html = explode("\r", $html);
	
	# Step through every line of that HTML and, if it contains a string present in the URL for
	# copatron IDs, use a regular expression to pull out that copatron's ID. It would be faster to
	# use PCRE for this, but only knowing regular expressions, I've used this more laborious 
	# approach.
	foreach ($html as $line)
	{
		if (stristr($line, 'legp504') !== false)
		{
			ereg('href="/cgi-bin/legp504\.exe\?'.$bill['session_lis_id'].'\+mbr\+([A-Z]{1}[0-9]*)"', $line, $copatron);
			if (!empty($copatron[1]))
			{
				# Build up an array of copatrons for this bill.
				$tmp = $copatron[1];
				# Convert the LIS ID to the Richmond Sunlight ID.
				$tmp = $legislators{$tmp};
				# Only proceed if this copatron isn't the chief patron.
				if ($tmp != $bill['chief_patron_id'])
				{
					$copatrons[] = $tmp;
				}
			}
		}
	}
	
	if ( is_array($copatrons) && (count($copatrons) > 0) )
	{
		
		# Sometimes leg1 reports duplicates, and we want to strip those out.
		$copatrons = array_unique($copatrons);
		
		# If we already knew about some copatrons for this bill, determine how this new knowledge
		# compares to that old knowledge.
		if (is_array($bill['copatrons']))
		{
			# Identify all of the elements of $copatrons that aren't also present in
			# $bill['copatrons']. These are the copatrons that we already know about.
			$new_copatrons = array_diff($copatrons, $bill['copatrons']);
			
			# Identify all of the elements of $bill['copatrons'] that aren't present in $copatrons
			# to remove from the database. These are legislators who were copatrons of this bill,
			# but no longer are.
			$expired_copatrons = array_diff($copatrons, $bill['copatrons']);
			
			# We can now reassign $new_copatrons as $copatrons to be added below.
			$copatrons = $new_copatrons;
			unset($new_copatrons);
		}
		
		echo '<p>'.count($copatrons).' Copatrons of '.$bill['session_lis_id'].' '.strtoupper($bill['number']).' Found:</p>';
		if (count($copatrons) > 0)
		{
			echo '<pre>';
			print_r($copatrons);
			echo '</pre>';
		}
		
		# If we've identifed any new copatrons, step through each of them and insert them.
		if (count($copatrons) > 0)
		{
			# Generate an insert statement that includes all of the legislators cosponsoring this bill.
			$sql = 'INSERT INTO bills_copatrons (bill_id, legislator_id, date_created)
					VALUES ';
			foreach($copatrons AS $copatron)
			{
				$sql .= '('.$bill['id'].', '.$copatron.', now()), ';
			}
			$sql = substr($sql, 0, -2);
			
			# Insert these copatrons.
			mysql_query($sql);
		}
		
		# If we've identified any expired copatrons, step through each of them and delete them.
		if (count($expired_copatrons) > 0)
		{
			foreach ($expired_copatrons as $patron)
			{
				$sql = 'DELETE FROM bills_copatrons
						WHERE bill_id='.$bill['id'].' AND legislator_id='.$patron;
			
				# Delete this expired copatron.
				mysql_query($sql);
			}
		}
		
	}
					
	# And update the bills table to reflect the number of copatrons.
	if (is_array($copatrons))
	{
		$copatron_count = count($copatrons);
	}
	else
	{
		$copatron_count = 0;
	}
	$sql = 'UPDATE bills
			SET copatrons='.$copatron_count.'
			WHERE id='.$bill['id'];
	mysql_query($sql);
	unset($copatron_count);
	
	# We don't want these variables gumming things up next time we loop through.
	unset($copatrons);
	unset($expired_copatrons);
	unset($new_copatrons);

	# Sleep for one-tenth of a second.
	usleep(100000);
}
	echo '<p>Done.</p>';
?>
</body>
</html>